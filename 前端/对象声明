http://www.cnblogs.com/ghostwu/p/7349233.html
面向对象的常见写法与优缺点
1：var Utils = {
    checkUserName: function () {
        console.log('Utils->checkUserName');
    }
}
是字面量方式添加，在设计模式里面，也称为单例（单体）模式， 与之类似的可以通过在函数本身添加属性和方法，变成静态属性和方法
和下面的一样
2：var Utils = {};
Utils.checkUserName = function () {
    console.log('Utils->checkUserName');
}
Utils.checkUserName();
和下面的一样
3：var Utils = function () {

}

上面的三种字面量形式 都无法new 


下面的都是new
var Utils = function () {
    this.add = function () {
        alert(123);
    }
}
var Util = function () {

};
Util.prototype.add = function () {
    alert(123);
};

var Utils = function () {
    return {
        add: function () {
            alert(123);
        }
    }
}
var Utils = function () {
    var a = {};
    a.add = function () {
        alert(123);
    }
    return a;
}
//加在函数上面的属性和方法，无法通过对象使用
var u = new Utils();
u.add();



var Util = function(){
            
        };
        Util.prototype = {
            checkUserEmail : function(){
                console.log( 'userEmail' );
            },
            checkUserName : function(){
                console.log( 'userName' );
            },
            checkUserPwd : function(){
                console.log( 'userPwd' );
            }
        };
        var oUtil1 = new Util();
        var oUtil2 = new Util();
        console.log( oUtil1.checkUserEmail === oUtil2.checkUserEmail );//true


        var Util = function(){
            return {
                checkUserName : function(){
                    console.log( 'userName...' );
                    return this;
                },
                checkUserPwd : function(){
                    console.log( 'userPwd...' );
                    return this;
                },
                checkUserEmail : function(){
                    console.log( 'userEmail...' );
                    return this;
                }
            }
        }
        // 方法中如果没有返回this,下面这种调用方式是错误的
        Util().checkUserEmail().checkUserName();

        // 方法中返回对象本身,可以链式调用
        Util().checkUserEmail().checkUserName().checkUserPwd();






创建对象的两种方式：

var o = new Object();
var o = {}; // 推荐


http://www.cnblogs.com/zczhangcui/p/6389023.html -JavaScript常见的创建对象的几种方式
https://segmentfault.com/a/1190000003862596  浅谈 JS 创建对象的 8 种模式

使用js模仿java的实体类对类/对象进行get操作  http://blog.csdn.net/occultskyrong/article/details/48497137


5、组合使用构造函数模式和原型模式
　　这是创建自定义类型的最常见的方式。

　　构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。所以每个实例都会有自己的一份实例属性的副本，但同时共享着对方法的引用，最大限度的节省了内存。同时支持向构造函数传递参数。

复制代码
function Person(name,age,job){
    this.name=name;
    this.age=age;
    this.job=job;
    this.friends=["S","C"];
}

Person.prototype={
    constructor:Person,
    sayName:function(){
        alert(this.name);
    }
};

var person1=new Person(...);


https://www.zhihu.com/question/19878052  JavaScript 中，定义函数时用 var foo = function () {} 和 function foo() 有什么区别？